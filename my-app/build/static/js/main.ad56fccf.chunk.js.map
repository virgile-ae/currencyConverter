{"version":3,"sources":["GetRate.tsx","Selector.tsx","App.tsx","index.tsx"],"names":["GetRate","props","useState","worth","setWorth","getUsdTo","currency","a","formattedCurrency","toUpperCase","fetch","response","json","formatted","quotes","wantedVal","convertCurrency","from","to","fromVal","toVal","parseFloat","multiplier","toFixed","dp","useEffect","Selector","setFrom","setTo","setMultiplier","accuracy","setAccuracy","className","htmlFor","type","id","placeholder","min","defaultValue","onChange","nMulti","document","getElementById","value","length","nFrom","autoComplete","nTo","max","nAcc","Math","abs","parseInt","App","ReactDOM","render","StrictMode"],"mappings":"8QAUe,SAASA,EAAQC,GAC9B,MAA0BC,qBAA1B,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAQ,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,4DACA,mCACH,oCACNC,EAAoBF,EAASG,cAHpB,SAKQC,MAAM,GAAD,OAHhB,oCAGgB,uBAJb,qCADA,cAKTC,EALS,gBAMSA,EAASC,OANlB,cAMTC,EANS,iBAOiBA,EAAUC,OAAV,aAAuBN,IAPxC,eAOTO,EAPS,yBAQRA,GARQ,4CAAH,sDAWRC,EAAe,uCAAG,WAAOC,EAAcC,GAArB,iBAAAX,EAAA,sEACAF,EAASY,GADT,cAChBE,EADgB,gBAEFd,EAASa,GAFP,OAEhBE,EAFgB,OAGtBhB,EAASiB,YAAaD,EAAQD,EAAWlB,EAAMqB,YAAYC,QAAQtB,EAAMuB,MAHnD,2CAAH,wDAUrB,OAJAC,qBAAU,WACRT,EAAgBf,EAAMgB,KAAMhB,EAAMiB,OAIlC,+BACGjB,EAAMgB,KAAKR,cADd,IAC8BR,EAAMqB,WADpC,WACwDrB,EAAMiB,GAAGT,cADjE,IACiFN,KChCtE,SAASuB,IACtB,MAAwBxB,mBAAS,OAAjC,mBAAOe,EAAP,KAAaU,EAAb,KACA,EAAoBzB,mBAAS,OAA7B,mBAAOgB,EAAP,KAAWU,EAAX,KACA,EAAoC1B,mBAAS,GAA7C,mBAAOoB,EAAP,KAAmBO,EAAnB,KACA,EAAgC3B,mBAAS,GAAzC,mBAAO4B,EAAP,KAAiBC,EAAjB,KAEA,OACE,sBAAKC,UAAU,WAAf,UACE,cAAC,EAAD,CAASf,KAAMA,EAAMC,GAAIA,EAAII,WAAYA,EAAYE,GAAIM,IACzD,iCACE,uBAAOG,QAAQ,aAAf,qBACA,uBACEC,KAAK,SACLC,GAAG,aACHC,YAAW,oBAAenB,EAAKR,eAC/B4B,IAAK,EACLC,aAAc,EACdN,UAAU,MACVO,SAAU,WACR,IAAMC,EAASC,SAASC,eAAe,cACnCF,EAAOG,MAAMC,QACff,EAAcR,WAAWmB,EAAOG,WAKtC,uBAAOV,QAAQ,OAAf,8BACA,uBACEC,KAAK,OACLC,GAAG,OACHC,YAAY,OACZE,aAAa,MACbC,SAAU,WACR,IAAMM,EAAQJ,SAASC,eAAe,QACX,IAAvBG,EAAMF,MAAMC,QACdjB,EAAQkB,EAAMF,UAIpB,uBAAOV,QAAQ,KAAf,gBACA,uBACEC,KAAK,OACLC,GAAG,KACHC,YAAY,KACZE,aAAa,MACbQ,aAAa,MACbP,SAAU,WACR,IAAMQ,EAAMN,SAASC,eAAe,MACX,IAArBK,EAAIJ,MAAMC,QACZhB,EAAMmB,EAAIJ,UAIhB,uBAAOV,QAAQ,KAAf,yBACA,uBACEC,KAAK,SACLC,GAAG,KACHC,YAAY,WACZJ,UAAU,MACVK,IAAK,EACLW,IAAK,GACLV,aAAc,EACdC,SAAU,WACR,IAAMU,EAAOR,SAASC,eAAe,MACrBO,EAAKN,MACTC,QACVb,EAAYmB,KAAKC,IAAIC,SAASH,EAAKN,kBClElC,SAASU,IACtB,OACE,sBAAKrB,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,2BACA,cAAC,EAAD,OCJNsB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFf,SAASC,eAAe,W","file":"static/js/main.ad56fccf.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./GetRate.css\";\r\n\r\ninterface IProps {\r\n  from: string;\r\n  to: string;\r\n  multiplier: number;\r\n  dp: number;\r\n}\r\n\r\nexport default function GetRate(props: IProps) {\r\n  const [worth, setWorth] = useState<number>();\r\n\r\n  const getUsdTo = async (currency: string): Promise<number> => {\r\n    const apiKey = \"492309f9595b2288cda297bfa46cfc88\";\r\n    const url = \"http://api.currencylayer.com/live\";\r\n    const formattedCurrency = currency.toUpperCase();\r\n\r\n    const response = await fetch(`${url}?access_key=${apiKey}`);\r\n    const formatted = await response.json();\r\n    const wantedVal: number = await formatted.quotes[`USD${formattedCurrency}`];\r\n    return wantedVal;\r\n  };\r\n\r\n  const convertCurrency = async (from: string, to: string): Promise<void> => {\r\n    const fromVal = await getUsdTo(from);\r\n    const toVal = await getUsdTo(to);\r\n    setWorth(parseFloat(((toVal / fromVal) * props.multiplier).toFixed(props.dp)));\r\n  };\r\n\r\n  useEffect(() => {\r\n    convertCurrency(props.from, props.to);\r\n  });\r\n\r\n  return (\r\n    <h1>\r\n      {props.from.toUpperCase()} {props.multiplier} equals {props.to.toUpperCase()} {worth}\r\n    </h1>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"./Selector.css\";\r\nimport GetRate from \"./GetRate\";\r\n\r\nexport default function Selector() {\r\n  const [from, setFrom] = useState(\"gbp\");\r\n  const [to, setTo] = useState(\"eur\");\r\n  const [multiplier, setMultiplier] = useState(1);\r\n  const [accuracy, setAccuracy] = useState(2);\r\n\r\n  return (\r\n    <div className=\"selector\">\r\n      <GetRate from={from} to={to} multiplier={multiplier} dp={accuracy} />\r\n      <form>\r\n        <label htmlFor=\"mutliplyer\">Convert</label>\r\n        <input\r\n          type=\"number\"\r\n          id=\"multiplyer\"\r\n          placeholder={`Number of ${from.toUpperCase()}`}\r\n          min={0}\r\n          defaultValue={1}\r\n          className=\"num\"\r\n          onChange={() => {\r\n            const nMulti = document.getElementById(\"multiplyer\") as HTMLInputElement;\r\n            if (nMulti.value.length) {\r\n              setMultiplier(parseFloat(nMulti.value));\r\n            }\r\n          }}\r\n        />\r\n\r\n        <label htmlFor=\"from\">Of what currency</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"from\"\r\n          placeholder=\"From\"\r\n          defaultValue=\"GBP\"\r\n          onChange={() => {\r\n            const nFrom = document.getElementById(\"from\") as HTMLInputElement;\r\n            if (nFrom.value.length === 3) {\r\n              setFrom(nFrom.value);\r\n            }\r\n          }}\r\n        />\r\n        <label htmlFor=\"to\">To</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"to\"\r\n          placeholder=\"To\"\r\n          defaultValue=\"EUR\"\r\n          autoComplete=\"off\"\r\n          onChange={() => {\r\n            const nTo = document.getElementById(\"to\") as HTMLInputElement;\r\n            if (nTo.value.length === 3) {\r\n              setTo(nTo.value);\r\n            }\r\n          }}\r\n        />\r\n        <label htmlFor=\"dp\">Rounded to </label>\r\n        <input\r\n          type=\"number\"\r\n          id=\"dp\"\r\n          placeholder=\"Accuracy\"\r\n          className=\"num\"\r\n          min={0}\r\n          max={16}\r\n          defaultValue={2}\r\n          onChange={() => {\r\n            const nAcc = document.getElementById(\"dp\") as HTMLInputElement;\r\n            const nAccVal = nAcc.value;\r\n            if (nAccVal.length) {\r\n              setAccuracy(Math.abs(parseInt(nAcc.value)));\r\n            }\r\n          }}\r\n        />\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Selector from \"./Selector\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">CONVERTISSEUR</h1>\n      <Selector />\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}